// üß†üí†üß©üí°üî¶üîçüí¨‚ÑπÔ∏è‚úèÔ∏èüëâ
const GameOutputMessage = require("./gameOutputMessage.js");
const GameUser = require('./gameUser.js');
const HotWord = require('./hotWord.js');
const PhraseBuilder = require('./phraseBuilder.js');

class Game {
    stepNum = 0;
    jacoGameUser = new GameUser('never', '–Ø–∫–æ–≤', 'male');
    history = [];
    constructor(gameMaster, innitiatorGameUser, gameUserGroup) {
        this.gameMaster = gameMaster;
        this.innitiatorGameUser = innitiatorGameUser;
        this.gameUserGroup = gameUserGroup;
        this.players = [{score: 0, gameUser: innitiatorGameUser}];
    }
    onMessage(messageText, gameUser) {
        messageText = messageText.toLowerCase().trim();
        const messageTokens = messageText.split(' ');
        if (!messageText[0] || messageText[0] === '?') {  // TODO
            const {boardText, citationText} = this.getCurrentStateText(); // TODO
            return new GameOutputMessage(this, null, boardText, citationText); // TODO
        } else if (messageTokens.length === 1) {
            let player = this.players.find(player => player.gameUser === gameUser);
            if (!player) {
                player = {
                    score: 0,
                    gameUser
                }
                this.players.push(player);
            };
            const fragmentText = messageTokens[0];
            return this.onAction(fragmentText, player);
        } else {
            return new GameOutputMessage(this, '–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø–ª–∏–∑. (');
        }
    }
    onAbort() {
        this.isPlaing = false;
        this.isDone = true;
        this.endTimestamp = Date.now();
        this.gameMaster.removeActiveGame(this);
        const {boardText, citationText} = this.getCurrentStateText();
        return new GameOutputMessage(this, 'C—Ç–æ–ø!11', boardText, citationText);
    }
    start() {
        this.isPlaing = true;
        this.isDone = false;

        const randomCitation = this.gameMaster.nlpBackend.getGoodCitation();
        this.randomCitation = randomCitation;
        const hotWordText = randomCitation.hotChunk.word.toLowerCase();
        const hotWordLemma = randomCitation.hotChunk.lemma.toLowerCase();
        const hotWordTag = randomCitation.hotChunk.tag;

        this.topSimonyms = this.gameMaster.nlpBackend.getSimilar(hotWordLemma, 20, 80000, hotWordTag);
        const topSimonymTexts = this.topSimonyms.map(topSimonym => topSimonym.smartVectorRecord.lemma);
        this.hotWord = new HotWord(hotWordText, hotWordLemma, topSimonymTexts);

        this.startTimestamp = Date.now();
        for (let i = 1; i < 5; i++) {
            this.hotWord.openBottomUnguessedTopSimonym(this.jacoGameUser);
        }
        const {boardText, citationText} = this.getCurrentStateText();
        return new GameOutputMessage(this, '‚è± –ü–æ–≥–Ω–∞–ª–∏!', boardText, citationText, null, '–ü–µ—Ä–≤—ã–π —Ö–æ–¥!..');
    }
    end() {
        this.isPlaing = false;
        this.isDone = true;
        this.endTimestamp = Date.now();
        this.players.forEach(player => {
            player.gameUser.stat.score += player.score;
            player.gameUser.stat.gamesCount++;
        });
        this.gameMaster.removeActiveGame(this);
    }

    referateAction(checkGuessResult, stat, player, fragmentText, proximity) {
        const proximityPercent = (proximity * 100).toFixed() + '%';
        const isKnownWord = (proximity !== null) && !checkGuessResult.hotWord.isLetter;
        const isBigWord = fragmentText.length > 4;
        const upcasedFragmentText = fragmentText.toUpperCase();
        let phrase;
        if (checkGuessResult.hotWord.isRobustGuess) {
            const justGuessedHotWordLetters = checkGuessResult.hotWord.justGuessedHotWordLetters;
            const justGuessedHotWordUniqueLetters = checkGuessResult.hotWord.justGuessedHotWordUniqueLetters;
            const justGuessedHotWordLettersCount = justGuessedHotWordLetters.length;
            const justGuessedHotWordUniqueLettersCount = justGuessedHotWordUniqueLetters.length;
            if (checkGuessResult.hotWord.isLetter) {
                // CASE: –±—É–∫–≤–∞ —É–≥–∞–¥–∞–Ω–∞
                if (justGuessedHotWordLettersCount === 1) {
                    phrase = `‚ùáÔ∏è –±—É–∫–≤–∞ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –µ—Å—Ç—å!`;
                } else if (justGuessedHotWordLettersCount === 2) {
                    phrase = `‚ùáÔ∏è —Ç–∞–∫–∏—Ö –±—É–∫–≤—ã ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ —Ü–µ–ª—ã—Ö –¥–≤–µ!!`;
                } else if (justGuessedHotWordLettersCount === 3) {
                    phrase = `‚ùáÔ∏è –¢–†–†–†–ò –±—É–∫–≤—ã ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤ —Å–ª–æ–≤–µ!!!`;
                } else {
                    phrase = `‚ùáÔ∏è –¥–æ–æ–æ–æ—Ö–µ—Ä–∞ –±—É–∫–≤ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤ —Å–ª–æ–≤–µ!!!!!`;
                }
            } else {
                if (checkGuessResult.topSimonym.isRobustGuess) {
                    // CASE: —Ç–æ–ø-—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ –∏ –æ–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ
                    phrase = `‚ú≥Ô∏è+#Ô∏è‚É£ –ø—Ä–æ—Å—Ç–æ –≤–∞—É!!! –°–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –û—Ç–∫—Ä—ã—Ç–æ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} (–µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent} ). –≠—Ç–æ –≤–æ-–ø–µ—Ä–≤—ã—Ö. –í–æ-–≤—Ç–æ—Ä—ã—Ö, —ç—Ç–æ —Å–ª–æ–≤–æ ‚ú≥Ô∏è ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–æ–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—Å–µ–≥–æ –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º ${justGuessedHotWordLettersCount} –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ, –∏ —Å–ª–æ–≤–æ ‚Ññ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –∏–∑ —Ç–æ–ø–∞! –ë—Ä–∞–≤–æ!`;
                } else if (isKnownWord) {
                    // CASE: —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω
                    if (isBigWord) {
                        // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω
                        if (checkGuessResult.topSimonym.wasTopGuess) {
                            // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, –±—ã–ª–æ —Ä–∞–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ —Ç–æ–ø–µ
                            phrase = `‚ú≥Ô∏è –•–∞, —Å–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ! –≠—Ç–æ —Å–ª–æ–≤–æ, –∫—Å—Ç–∞—Ç–∏ ‚Ññ #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –Ω–æ –º—ã –µ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ —ç—Ç–æ–≥–æ. (–±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}).`;
                        } else if (checkGuessResult.topSimonym.wasGuessed) {
                            // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                            phrase = `‚ú≥Ô∏è –í–æ—Ç —ç—Ç–æ —Å–∏—Ç–∞—Ü–∏—è! –ú—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ —Å–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –≤—Å–µ–≥–æ-—Ç–æ ${proximityPercent}.`;
                        } else {
                            // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                            phrase = `üà≥/‚ú≥Ô∏è –°–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}.`;
                        }
                    } else {
                        // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ
                        if (checkGuessResult.topSimonym.wasTopGuess) {
                            // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, –±—ã–ª —Ä–∞–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–æ–ø–µ
                            phrase = `‚ú≥Ô∏è –•–º–º! ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –≠—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –µ—â—ë –∏ —Å–ª–æ–≤–æ ‚Ññ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –Ω–æ –º—ã –µ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–Ω–µ–µ. (–±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}).`;
                        } else if (checkGuessResult.topSimonym.wasGuessed) {
                            // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                            phrase = `‚ú≥Ô∏è –•–∞, ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ. –≠—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –µ—â—ë –∏ —Å–ª–æ–≤–æ, –ø—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É –≤—Å–µ–≥–æ-—Ç–æ ${proximityPercent}.`;
                        } else {
                            // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                            phrase = `üà≥/‚ú≥Ô∏è –°–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}.`;
                        }
                    }
                } else {
                    // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω
                    if (justGuessedHotWordUniqueLettersCount > 4) {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –±–æ–ª—å—à–µ 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤
                        phrase = `‚ú≥Ô∏è –±—É—É—É–º! —Ñ—Ä–∞–≥–º–µ–Ω—Ç ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, —Å—Ä–∞–∑—É ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ!`;
                    } else if (justGuessedHotWordUniqueLettersCount > 1) {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –±–æ–ª—å—à–µ 1 —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –±—É–∫–≤—ã
                        const lettersWithoutLast = justGuessedHotWordUniqueLetters.slice(0, justGuessedHotWordUniqueLetters.length - 1);
                        const lastLetterText = '"' + justGuessedHotWordUniqueLetters[justGuessedHotWordUniqueLetters.length - 1].toUpperCase() + '"';
                        const lettersWithoutLastText = lettersWithoutLast.map(letter => `"${letter.toUpperCase()}"`).join(', ');
                        const lettersText = lettersWithoutLastText + ' –∏ ' + lastLetterText;
                        phrase = `‚ú≥Ô∏è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –§—Ä–∞–≥–º–µ–Ω—Ç ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—É–∫–≤—ã ‚ùáÔ∏è ${lettersText}. ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç–æ!`;
                    } else if (justGuessedHotWordUniqueLettersCount === 1) {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –±—É–∫–≤–∞
                        const uniqueLetter = justGuessedHotWordUniqueLetters[0];
                        if (justGuessedHotWordLettersCount === 1) {
                            // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 –±—É–∫–≤–∞
                            phrase = `‚ú≥Ô∏è/‚ùáÔ∏è –∏–∑ –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É ‚ùáÔ∏è "${uniqueLetter}". –î–æ–≤–æ–ª—å–Ω–æ —Ä–∏—Å–∫–æ–≤–Ω–∞–Ω–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫.`;
                        } else {
                            // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –±—É–∫–≤–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                            phrase = `‚ú≥Ô∏è/‚ùáÔ∏è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–∑ –≤—Å–µ–≥–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—É–∫–≤—É ‚ùáÔ∏è ${uniqueLetter}, –Ω–æ –∑–∞—Ç–æ ${justGuessedHotWordLettersCount} —Ä–∞–∑! –õ–æ–≤–∫–æ!`;
                        }
                    } else {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤ 0
                        throw new Error('CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤ 0');
                    }
                }
            }
        } else if (checkGuessResult.topSimonym.isRobustGuess) {
            // CASE: —Ç–æ–ø-—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ
            phrase = `#Ô∏è‚É£ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} —É–≥–∞–¥–∞–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ! –ï–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}.`;
        } else if (isKnownWord) {
            // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            if (isBigWord) {
                // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –±–æ–ª—å—à–æ–µ —Å–ª–æ–≤–æ
                if (checkGuessResult.hotWord.wasGuessed) {
                    // CASE: —Ç–∞–∫–æ–µ –±–æ–ª—å—à–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –Ω–æ –µ–≥–æ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `—Å–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ.`;
                } else {
                    // CASE: —Ç–∞–∫–æ–µ –±–æ–ª—å—à–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `*Ô∏è‚É£ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤—É "${upcasedFragmentText}": –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ù–∞–¥–µ—é—Å—å —ç—Ç–æ –∫–∞–∫-—Ç–æ –ø–æ–º–æ–∂–µ—Ç.`;
                }
            } else {
                // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if (checkGuessResult.hotWord.wasGuessed) {
                    // CASE: —Ç–∞–∫–∞–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –Ω–æ –µ–≥–æ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `—Å–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å c–ª–µ–¥—É—é—â–∏–π —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ.`;
                } else {
                    // CASE: —Ç–∞–∫–∞–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `*Ô∏è‚É£ —Å–ª–æ–≤–æ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${proximityPercent}. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`;
                }
            }

        } else {
            // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–ª–∏ –±—É–∫–≤–∞, –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ
            if (checkGuessResult.hotWord.isLetter) {
                // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞
                if (checkGuessResult.hotWord.wasLetterGoodGuessed) {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, –æ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
                    phrase = `üÜé –Ω–æ –≤–µ–¥—å –±—É–∫–≤–∞ ‚ùáÔ∏è ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —É–∂–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞. –ó—Ä—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π —Ö–æ–¥.`;
                } else if (checkGuessResult.hotWord.wasLetterBadGuessed) {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `üÜé –±—É–∫–≤—É ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —É–∂–µ –Ω–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ. –ë—É–¥—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π.`;
                } else {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    let rnd = Math.random();
                    if (rnd > 0.9) {
                        phrase = `üÜé –±—É–∫–≤—ã ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç`;
                    } else if (rnd > 0.8) {
                        phrase = `üÜé –Ω–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã`;
                    } else if (rnd > 0.7) {
                        phrase = `üÜé –∂–∞–ª—å, –Ω–æ –±—É–∫–≤—ã ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –Ω–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ`;
                    } else if (rnd > 0.6) {
                        phrase = `üÜé —É–ø—Å, —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç. –í—ã—á–µ—Ä–∫–∏–≤–∞–µ–º ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–∫–≤`;
                    } else if (rnd > 0.5) {
                        phrase = `üÜé ¬´<u><b>${upcasedFragmentText}</b></u>¬ª - —Ö–æ—Ä–æ—à–∞—è –±—É–∫–≤–∞, –Ω–æ –≤ —Å–ª–æ–≤–µ –µ—ë –Ω–µ—Ç. –ñ–∞–ª—å`;
                    } else if (rnd > 0.4) {
                        phrase = `üÜé —Ç–∞–∫–æ–π –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç`;
                    } else if (rnd > 0.3) {
                        phrase = `üÜé –±—É–∫–≤–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç`;
                    } else if (rnd > 0.2) {
                        phrase = `üÜé —Ö–æ—Ç–µ–ª –±—ã —è, —á—Ç–æ–±—ã –≤ –∂–∏–∑–Ω–∏ —É –∫–∞–∂–¥–æ–≥–æ –±—É–∫–≤ ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –±—ã–ª–æ –ø–æ–±–æ–ª—å—à–µ, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ –µ—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π`;
                    } else if (rnd > 0.1) {
                        phrase = `üÜé –ø–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å: —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç. –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –±—É–∫–≤—É —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ. ¬´<u><b>${upcasedFragmentText}</b></u>¬ª –∏—Å–∫–ª—é—á–µ–Ω–∞.`;
                    } else {
                        phrase = `üÜé –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç –±—É–∫–≤—ã "${upcasedFragmentText}"`;
                    }
                }
            } else {
                // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–Ω–µ –±—É–∫–≤–∞), –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ
                if (checkGuessResult.hotWord.wasGoodGuessedSubstring) {
                    // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–Ω–µ –±—É–∫–≤–∞), –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ, —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ —Ä–∞–Ω—å—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —ç—Ç–æ—Ç –µ—Å—Ç—å —Ü–µ–ª–∏–∫–æ–º
                    phrase = `‚ú¥Ô∏è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ ‚ú≥Ô∏è ¬´<u><b>${upcasedFragmentText}</b></u>¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ "${checkGuessResult.hotWord.wasGoodGuessedSubstring.toUpperCase()}", —ç—Ç–æ —Ä–∞–Ω–µ–µ —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏`;
                } else {
                    phrase = `‚ú¥Ô∏è –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç "${upcasedFragmentText}", –Ω–∏ –æ–¥–Ω–æ–π –±—É–∫–≤—ã –Ω–µ —É–≥–∞–¥–∞–Ω–æ`;
                }
            }
        }
        let postPhrase = '';
        if (stat.hotWord.unguessedLetters === 0) {
            postPhrase = `\n‚úÖ –í–´ –ü–û–õ–ù–û–°–¢–¨–Æ –£–ì–ê–î–ê–õ–ò –°–õ–û–í–û! "${this.hotWord.wordText.toUpperCase()}", –£–†–ê!`;
        } else if (stat.hotWord.unguessedLetters < 3) {
            postPhrase = `\n‚úÖ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ ${stat.hotWord.unguessedLetters.length} –±—É–∫–≤, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–ª–æ–≤–æ ${this.hotWord.wordText.toUpperCase()} —Ä–∞—Å–∫—Ä—ã—Ç–æ! –≠—Ç–æ –ø–æ–±–µ–¥–∞!`;
        }
        const phrases = [phrase, postPhrase];
        return phrases;
    }
    referateScoreGain(checkGuessResult, stat, player, fragmentText, proximity) {
        const isKnownWord = (proximity !== null) && !checkGuessResult.hotWord.isLetter;
        let scoreGains = [];
        if (checkGuessResult.topSimonym.isRobustGuess) {
            const scoreGainValue = 250 + Math.round(750 / (checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1));
            const scoreGain = {
                subject: '–±–ª–∏–∑–∫–æ–µ —Ç–æ–ø-—Å–ª–æ–≤–æ',
                value: scoreGainValue,
                congratz: 1,
            }
            scoreGains.push(scoreGain);
        }

        if (checkGuessResult.hotWord.isRobustGuess) {

            if (checkGuessResult.hotWord.isLetter) {
                const scoreGainValue = 50 * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                const scoreGain = {
                    subject: '–±—É–∫–≤–∞',
                    value: scoreGainValue,
                    congratz: Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3),
                }
                scoreGains.push(scoreGain);
            } else {
                const scoreGainValue = 50 * checkGuessResult.hotWord.justGuessedHotWordLetters.length * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                const scoreGain = {
                    subject: '—Ñ—Ä–∞–≥–º–µ–Ω—Ç',
                    value: scoreGainValue,
                    congratz: Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3),
                }
                scoreGains.push(scoreGain);
            }
        }

        if (!checkGuessResult.topSimonym.isRobustGuess && !checkGuessResult.hotWord.isRobustGuess) {
            if (checkGuessResult.hotWord.wasGuessed) {
                const scoreGainValue = -50;
                const scoreGain = {
                    subject: '–Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    value: scoreGainValue,
                    congratz: -1,
                }
                scoreGains.push(scoreGain);
            } else if (isKnownWord && !checkGuessResult.topSimonym.wasGuessed) {
                const scoreGainValue = -10;
                const scoreGain = {
                    subject: '—Ü–µ–Ω–∞ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞',
                    value: scoreGainValue,
                    congratz: 0,
                }
                scoreGains.push(scoreGain);
            } else {
                const scoreGainValue = -25;
                const scoreGain = {
                    subject: '–Ω–µ—É–¥–∞—á–∞',
                    value: scoreGainValue,
                    congratz: -1,
                }
                scoreGains.push(scoreGain);
            }
        }

        if (stat.hotWord.unguessedLetters.length === 0) {
            const scoreGainValue = 1000;
            const scoreGain = {
                subject: '—Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é',
                value: scoreGainValue,
                congratz: 5,
                isFinal: true,
            }
            scoreGains.push(scoreGain);
        } else if (stat.hotWord.unguessedLetters.length < 3) {
            const scoreGainValue = 500;
            const scoreGain = {
                subject: '—Å–ª–æ–≤–æ –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é',
                value: scoreGainValue,
                congratz: 4,
                isFinal: true,
            }
            scoreGains.push(scoreGain);
        }
        if (stat.hotWord.unguessedLetters.length < 3 && this.stepNum < 10) {
            const scoreGainValue = 3000 / this.stepNum;
            const scoreGain = {
                subject: '–±—ã—Å—Ç—Ä–∞—è –ø–æ–±–µ–¥–∞',
                value: scoreGainValue,
                congratz: 6,
                isFinal: true,
            }
            scoreGains.push(scoreGain);
        }

        const initialReferateResult = {scoreGainTextLines: [], scoreGainSum: 0, congratzMax: -Infinity, isFinal: false};
        if (scoreGains.length > 0) {
            const referateResult = scoreGains.reduce((referateResult, scoreGain) => {
                const scoreGainSignedText = ((scoreGain.value >= 0) ? '+' : '-') + Math.abs(scoreGain.value);
                // üí∞üí≤üîπ
                const scoreGainTextLine = `üí∞ ${player.score + referateResult.scoreGainSum} <b>[ ${scoreGainSignedText} ]</b> = ${player.score + referateResult.scoreGainSum + scoreGain.value}  / ${scoreGain.subject} /`;
                referateResult.scoreGainTextLines.push(scoreGainTextLine);
                referateResult.scoreGainSum += scoreGain.value;
                referateResult.congratzMax = Math.max(scoreGain.congratz, referateResult.congratzMax);
                referateResult.isFinal = !!(scoreGain.isFinal || referateResult.isFinal);
                return referateResult;
            }, initialReferateResult);
            return referateResult;
        } else {
            const referateResult =  Object.assign({}, initialReferateResult, {congratzMax: 0});
            return referateResult;
        }
    }
    onAction(fragmentText, player) {
        const checkGuessResult = this.hotWord.guess(fragmentText, player);
        const stat = this.hotWord.getStat();
        const proximity = this.gameMaster.nlpBackend.getProximity(this.hotWord.lemmaText, fragmentText);
        const referatePhrases = this.referateAction(checkGuessResult, stat, player, fragmentText, proximity);
        const referateText = PhraseBuilder.phrasesToText(referatePhrases);
        const {scoreGainTextLines, scoreGainSum, congratzMax, isFinal} = this.referateScoreGain(checkGuessResult, stat, player, fragmentText, proximity);
        player.score+= scoreGainSum;

        let answerText = '';
        answerText += referateText;
        answerText += '\n';

        scoreGainTextLines.forEach(answerTextLine => answerText += answerTextLine + '\n');

        let hintPhrase = '';
        let aidPhrase = '';
        if (isFinal) {
            this.hotWord.openHotWord();
            this.end();
            hintPhrase = '‚èπ —ç—Ç–∞ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ "+" —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑.';
        } else {
            hintPhrase = '–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!..';
            if (stat.topSimonym.unguessedSimonyms.length) {
                const topSinonymIdx = this.hotWord.openBottomUnguessedTopSimonym(this.innitiatorGameUser);
                if (topSinonymIdx !== null) {
                    const topSinonymText = this.hotWord.topSimonymTexts[topSinonymIdx];
                    aidPhrase = `üí† –æ—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É ‚Äî —Ç–æ–ø-—Å–ª–æ–≤–æ: \n#Ô∏è‚É£ #${topSinonymIdx + 1} ¬´<u><b>${topSinonymText.toUpperCase()}</b></u>¬ª.`;
                } else {
                    throw new Error();
                }
            } else if (stat.hotWord.unguessedLetters.length) {
                const hotLetterIdx = this.hotWord.openRandomUnguessedHotLetter(this.innitiatorGameUser);
                if (hotLetterIdx !== null) {
                    const hotWordLetter = this.hotWord.wordText[hotLetterIdx];
                    aidPhrase = `üí† –Ω–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–∫—Ä–æ–µ–º –±—É–∫–≤—É ‚Äî ‚ùáÔ∏è "<u><b>${hotWordLetter.toUpperCase()}</b></u>". –ï—Å—Ç—å –∏–¥–µ–∏?`;
                } else {
                    throw new Error();
                }
            }
        }
        const hintText = PhraseBuilder.phrasesToText([hintPhrase]);
        const aidText = PhraseBuilder.phrasesToText([aidPhrase]);
        //console.log(checkGuessResult);
        //console.log(stat);
        const {boardText, citationText, shortCitationText} = this.getCurrentStateText();
        this.stepNum++;
        const gameOutputMessage = new GameOutputMessage(this, answerText, boardText, citationText, shortCitationText, hintText, aidText, congratzMax, isFinal);
        const historyEvent = {
            player,
            fragmentText,
            gameOutputMessage,
            date: new Date(),
        };
        this.history.push(historyEvent);
        return gameOutputMessage;
    }
    getGuessedBadLettersText() {
        const badLettersText = Object.keys(this.hotWord.guessHistory.fragment.letter.bad).reverse().join('');
        return badLettersText;
    }
    getRandomCitationInfoText() {
        const positionRatio = this.randomCitation.positionRatio;
        let positionText;
        if (positionRatio >= 0 && positionRatio < 0.05) {
            positionText = '–≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.05 && positionRatio < 0.15) {
            positionText = '–≤ –Ω–∞—á–∞–ª–µ –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.15 && positionRatio < 0.35) {
            positionText = '–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.35 && positionRatio < 0.45) {
            positionText = '–±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.45 && positionRatio < 0.55) {
            positionText = '–Ω–∞ —ç–∫–≤–∞—Ç–æ—Ä–µ –∫–Ω–∏–≥–∏';
        }else if (positionRatio >= 0.55 && positionRatio < 0.65) {
            positionText = '–≤ –Ω–∞—á–∞–ª–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.65 && positionRatio < 0.85) {
            positionText = '–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.85 && positionRatio <= 0.95) {
            positionText = '–∫ –∫–æ–Ω—Ü—É –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.95 && positionRatio <= 1) {
            positionText = '–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥–∏';
        } else {
            throw new Error('Wrong ratio');
        }
        const citationInfoText = `üìñ ¬´${this.randomCitation.bookInfo.name}¬ª ${this.randomCitation.bookInfo.author} (${this.randomCitation.bookInfo.year}) [${positionText}]`;
        return citationInfoText;
    }
    getTopSimonymText() {
        const stat = this.hotWord.getStat();
        const lines = [];
        this.topSimonyms.forEach((topSimonym, idx) => {
            const isOpened = this.isDone || stat.topSimonym.guessedSimonyms.includes(topSimonym.smartVectorRecord.lemma);
            let lemma;
            if (isOpened) {
                lemma = topSimonym.smartVectorRecord.lemma;
            } else {
                lemma = '?'.repeat(topSimonym.smartVectorRecord.lemma.length);
            }
            const tag = topSimonym.smartVectorRecord.tag;
            const proximityPercent = (topSimonym.proximity * 100).toFixed()+'%';
            const rank = topSimonym.smartVectorRecord.rank;
            const rankCategory = (rank > 60000) ? '—Ä–µ–¥–∫.' : '';
            //const line = `#${idx + 1}: ${lemma} ${tag} ${proximityPercent} R${rankCategory}`;
            const line = `#${idx + 1}: ${lemma} ${proximityPercent} ${rankCategory}`;

            if (isOpened) { // TEMPORARY TODO: configurable
                lines.push(line);
            }
        });
        return lines.join('\n');
        //const rowsCount = Math.floor(lines.length / 2);
        //let rowLines = [];
        //for (let r = 0; r < rowsCount; r++) {
        //    const sinonymLineA = lines[r];
        //    const sinonymLineB = lines[r + rowsCount];
        //    const rowLine = sinonymLineA.padEnd(50) + sinonymLineB;
        //    rowLines.push(rowLine);
        //}
        //return rowLines.join('\n');
    }
    getCurrentStateText() {
        const maskedWord = this.isDone ? this.hotWord.wordText.toUpperCase() : this.hotWord.getMasked();

        let citationText = '';
        let shortCitationText = '';

        if (this.randomCitation) {
            const randomCitationInfoText = this.getRandomCitationInfoText();
            const [hotChunkWordPrefix, hotChunkWordPostfix] = this.randomCitation.hotChunk.text.split(this.randomCitation.hotChunk.word);
            citationText += randomCitationInfoText;
            citationText += `\n`;
            citationText += `--------------------------------`;
            citationText += `\n`;
            citationText += `üí¨ <i>"...${this.randomCitation.prefixText}${hotChunkWordPrefix}</i><b>${maskedWord}</b><i>${hotChunkWordPostfix}${this.randomCitation.postfixText}..."</i>`;
            citationText += `\n`;

            shortCitationText += `üí¨ <i>"...${this.randomCitation.shortPrefixText}${hotChunkWordPrefix}</i><b>${maskedWord}</b><i>${hotChunkWordPostfix}${this.randomCitation.shortPostfixText}..."</i>`;
        }

        let boardText = '';

        const wordLength = this.hotWord.wordText.length;
        const unguessedLettersCount = this.hotWord.getStat().hotWord.unguessedLetters.length;

        boardText += `‚ú≥Ô∏è `;
        boardText += `[ <b>${maskedWord}</b> ] ${wordLength} / ${unguessedLettersCount}`;
        boardText += `\n`;
        boardText += `‚Äî`;
        boardText += `\n`;

        const badLettersRawText = this.getGuessedBadLettersText();
        if (badLettersRawText) {
            const badLettersText = `<s>${badLettersRawText.toUpperCase()}</s>`;
            boardText += `üÜé `;
            boardText += `${badLettersText}`;
            boardText += `\n`;
            boardText += `‚Äî`;
            boardText += `\n`;
        }

        boardText += `#Ô∏è‚É£ `;
        boardText += this.getTopSimonymText();
        boardText += `\n`;
        boardText += `\n`;

        if (this.isDone) {
            const secDiff = Math.floor((this.endTimestamp - this.startTimestamp) / 1000);
            boardText += `–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω –∑–∞ ‚è± ${secDiff} —Å–µ–∫—É–Ω–¥. `;
            boardText += `–∏ üîÑ ${this.stepNum + 1} —Ö–æ–¥–æ–≤. `;
        }
        return {boardText, citationText, shortCitationText};
    }
}
module.exports = Game;
