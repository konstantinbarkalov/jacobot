// üß†üí†üß©üí°üî¶üîçüí¨‚ÑπÔ∏è‚úèÔ∏èüëâ
const GamestepOutputMessage = require("./gamestepOutputMessage.js");
const GameUser = require('./gameUser/gameUser.js');
const ScoreGain = require('./gameUser/scoreGain.js');
const HotWord = require('./hotWord.js');
const MiscOutputMessage = require('./miscOutputMessage.js');
const PhraseBuilder = require('./phraseBuilder.js');

const uncommonRankThreshold = 70000;
const topSimonymRankThreshold = 80000; // aka rareRankThreshold
class Game {
    stepNum = 0;
    jacoGameUser = new GameUser('never', '–Ø–∫–æ–≤');
    history = [];
    isInCooldown = false;
    constructor(gameMaster, innitiatorGameUser, gameUserGroup) {
        this.gameMaster = gameMaster;
        this.innitiatorGameUser = innitiatorGameUser;
        this.gameUserGroup = gameUserGroup;
        this.players = [ { score: { sum: 0, gains: [], streak: 0 }, gameUser: innitiatorGameUser } ];
    }
    onMessage(messageText, gameUser) {
        if (this.isInCooldown) {
            return null;
        }
        messageText = messageText.toLowerCase().trim();
        const messageTokens = messageText.split(' ');
        if (messageText === '?') {  // TODO
            const {boardText, citationText} = this.getCurrentStateText(); // TODO
            return new GamestepOutputMessage(this, 0, null, null, boardText, citationText, null, null, null, null, null, false, true); // TODO
        } else if (messageTokens.length === 1) {
            let player = this.players.find(player => player.gameUser === gameUser);
            if (!player) {
                player = { score: { sum: 0, gains: [], streak: 0 }, gameUser };
                this.players.push(player);
            };
            const fragmentText = messageTokens[0];
            const validActionRegexp = /^[–∞-—è–ê-–Ø—ë–Å]+$/;
            const isValidAction = validActionRegexp.test(fragmentText);
            if (isValidAction) {
                return this.onAction(fragmentText, player);
            } else {
                const invalidActionEnglishRegexp = /[a-zA-Z]/;
                const invalidActionDigitsRegexp = /[0-9]/;
                const isInvalidActionEnglish = invalidActionEnglishRegexp.test(fragmentText);
                const isInvalidActionDigits = invalidActionDigitsRegexp.test(fragmentText);
                if (isInvalidActionEnglish) {
                    return new MiscOutputMessage(this, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É. –ê —Ç–æ —Ç–∞–º —É —Ç–µ–±—è —Ç–∞–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –∞ —è –Ω–∞ –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–µ —É—á–∏–ª—Å—è...');
                } else if (isInvalidActionDigits) {
                    return new MiscOutputMessage(this, '–ë–æ—é—Å—å, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å —á–∏—Å–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏. –ú–æ–∂–µ—Ç —ç—Ç–æ –±—ã–ª–∞ –æ–ø–µ—á–∞—Ç–∫–∞? ü§î /help?');
                } else {
                    return new MiscOutputMessage(this, '–°—Ç—ã–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. üòï /help?');
                }
            }
        } else {
            return new MiscOutputMessage(this, '–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø–ª–∏–∑. –Ø –ø–æ–∫–∞ –µ—â—ë –Ω–µ –ø–æ–Ω–∏–º–∞—é –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–±–µ–ª–æ–º. –ü—Ä–æ—Å—Ç–∏. ‚ò∫Ô∏è –ú–æ–∂–µ—Ç /help?');
        }
    }
    onAction(fragmentText, player) {
        const checkGuessResult = this.hotWord.guess(fragmentText, player);
        const stat = this.hotWord.getStat();
        const nearest = this.randomCitation.hotChunk.entity.getNearest(fragmentText);
        const proximity = nearest?.maxProximity;
        const rank = nearest?.vectorRecord.vocabularyIdx;
        const referatePhrases = this.referateAction(checkGuessResult, stat, player, fragmentText, proximity, rank);
        const referateText = PhraseBuilder.phrasesToText(referatePhrases);
        const {scoreGainTextLines, scoreGainSum, congratzMax, isFinal, scoreGains} = this.referateScoreGain(checkGuessResult, stat, player, fragmentText, proximity, rank);
        player.score.sum += scoreGainSum;
        //player.score.gainsPerStep[this.stepNum] = scoreGains;
        player.score.gains = player.score.gains.concat(scoreGains);

        if  ((Math.sign(player.score.streak) !== Math.sign(scoreGainSum))) {
            player.score.streak = 0;
        }
        player.score.streak += Math.sign(scoreGainSum);

        let answerText = '';
        answerText += referateText;
        answerText += '\n';
        scoreGainTextLines.forEach(answerTextLine => answerText += answerTextLine + '\n');

        let scoreInfoText = '';

        let hintPhrase = '';
        let aidPhrase = '';
        if (isFinal) {
            const isMultiplayer = this.players.length > 1;
            const sortedPlayers = this.players.sort((a, b) => b.score.sum - a.score.sum);
            sortedPlayers.splice(3);

            const scoreDetailsTextsPerTopPlayer = this.getGameScoreDetailsText(sortedPlayers); // do before game end (asd stats applied)

            this.hotWord.openHotWord();
            this.end();

            const scoreSummaryTextsPerTopPlayer = this.getGameScoreSummaryText(sortedPlayers); // do after game end (asd stats applied)

            for (let idx = 0; idx < sortedPlayers.length; idx++) {
                const scoreDetailsTextForPlayer = scoreDetailsTextsPerTopPlayer[idx];
                const scoreSummaryTextForPlayer = scoreSummaryTextsPerTopPlayer[idx];
                scoreInfoText += scoreDetailsTextForPlayer + scoreSummaryTextForPlayer + '\n';
            }

            hintPhrase = '‚èπ —ç—Ç–∞ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ /go –∏–ª–∏ ¬´+¬ª —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑.';
        } else {
            hintPhrase = '‚è± –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!..';
            if (stat.topSimonym.unguessedSimonyms.length) {
                const topSinonymIdx = this.hotWord.openBottomUnguessedTopSimonym(this.innitiatorGameUser);
                if (topSinonymIdx !== null) {
                    const topSinonymText = this.hotWord.topSimonymTexts[topSinonymIdx];
                    const topSinonymProximityPercent = (this.topSimonyms[topSinonymIdx].maxProximity * 100).toFixed(0) + '%';
                    aidPhrase = `üí† –æ—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤—É—é –Ω–µ–π—Ä–æ–ø–æ–¥—Å–∫–∞–∑–∫—É ‚Äî —Ç–æ–ø-—Å–ª–æ–≤–æ: #Ô∏è‚É£ <b>#${topSinonymIdx + 1} ${topSinonymText.toUpperCase()} ${topSinonymProximityPercent}</b>.`;
                } else {
                    throw new Error();
                }
            } else if (stat.hotWord.unguessedLetters.length) {
                const hotLetterIdx = this.hotWord.openRandomUnguessedHotLetter(this.innitiatorGameUser);
                if (hotLetterIdx !== null) {
                    const hotWordLetter = this.hotWord.wordText[hotLetterIdx];
                    aidPhrase = `üí† –Ω–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–∫—Ä–æ–µ–º –±—É–∫–≤—É ‚Äî ‚ùáÔ∏è "<b>${hotWordLetter.toUpperCase()}</b>". –ï—Å—Ç—å –∏–¥–µ–∏?`;
                } else {
                    throw new Error();
                }
            }
        }
        const hintText = PhraseBuilder.phrasesToText([hintPhrase]);
        const aidText = PhraseBuilder.phrasesToText([aidPhrase]);
        //console.log(checkGuessResult);
        //console.log(stat);
        const {boardText, citationText, shortCitationText} = this.getCurrentStateText();
        let unfinalShortCitationText;
        if (!isFinal) {
            unfinalShortCitationText = shortCitationText;
        }

        this.stepNum++;
        const preAnswerText = '‚è± –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –ò—Ç–∞–∫...';
        const gamestepOutputMessage = new GamestepOutputMessage(this, 3000, preAnswerText, answerText, boardText, citationText, unfinalShortCitationText, hintText, aidText, scoreInfoText, congratzMax, isFinal);
        const historyEvent = {
            player,
            fragmentText,
            gamestepOutputMessage,
            date: new Date(),
        };
        this.history.push(historyEvent);
        return gamestepOutputMessage;
    }

    onAbort() {
        this.isPlaing = false;
        this.isAborted = true;
        this.isDone = true;
        this.endTimestamp = Date.now();

        /// remove
        this.players.forEach(player => {
            player.gameUser.scoreStat.addFromGame(this, player.gameUser.genericUserUid);
        });
        this.gameMaster.gameUserStorage.save();
        /// remove

        this.gameMaster.removeActiveGame(this);
        const {boardText, citationText} = this.getCurrentStateText();
        return new GamestepOutputMessage(this, 0, null, '–ö—Ç–æ-—Ç–æ –¥–µ—Ä–Ω—É–ª —Å—Ç–æ–ø-–∫—Ä–∞–Ω! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', boardText, citationText, null, null, null, null, null, true);
    }

    onGameStat() {
        const hotWordRank = this.randomCitation.hotChunk.entity.vectorRecord.vocabularyIdx;
        const stat = {
            '—Å–ª–æ–∂–Ω–æ—Å—Ç—å': (this.difficultyRatio * 100).toFixed() + '%',
            '—Ö–æ–¥': this.stepNum + 1,
            '–∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤': this.players.length,
            '—Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã': this.isPlaing ? (this.isInCooldown ? '–∫—É–ª–¥–∞—É–Ω' : '–∏–≥—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' ) : this.isAborted ? '–∏–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞' : this.isDone ? '–∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞' :'–∏–≥—Ä–∞ –≤ –∫–æ–º–µ',
            '—Ä–∞–Ω–≥ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞': hotWordRank,
        }
        let statText = Object.entries(stat).map(([key, value]) => `${key}: ${value}`).join('\n');

        return new MiscOutputMessage(this, statText);
    }

    start() {
        const isSingleplayer = this.gameUserGroup.genericUserGroupUid === this.innitiatorGameUser.genericUserUid;
        if (isSingleplayer) {
            const logBase = 1000;
            const positiveGamesCount = 1 + this.innitiatorGameUser.scoreStat.gamesCount * (logBase - 1) / logBase;
            const gamesCountLog = Math.log(positiveGamesCount) / Math.log(logBase);
            this.difficultyRatio = Math.max(0, Math.min(1, gamesCountLog));
            // 0.0 at 0, 1.0 at 1000, 0.5 at 30, 0.25 at 5, 0.75 at 177, 0.9 at 500
        } else {
            this.difficultyRatio = 0.5;
        }
        this.isPlaing = true;
        this.isAborted = false;
        this.isDone = false;

        // difficulty based
        const desiredTag = (this.difficultyRatio < 0.2) ? 'NOUN' : undefined;
        const maxRank = 150000 * this.difficultyRatio + 100 * (1 - this.difficultyRatio);
        const minRank = 100 * this.difficultyRatio + 0 * (1 - this.difficultyRatio);
        const idealProximityToCluster = 0.3 * this.difficultyRatio + 0.7 * (1 - this.difficultyRatio);

        const randomCitation = this.gameMaster.nlpBackend.getGoodCitation(desiredTag, maxRank, minRank, idealProximityToCluster);
        this.randomCitation = randomCitation;
        const hotWordText = randomCitation.hotChunk.chunk.word.toLowerCase();
        const hotWordLemma = randomCitation.hotChunk.chunk.lemma.toLowerCase();
        const hotWordTag = randomCitation.hotChunk.chunk.tag;

        this.topSimonyms = randomCitation.hotChunk.entity.getNearests(20, topSimonymRankThreshold);
        const topSimonymTexts = this.topSimonyms.map(topSimonym => topSimonym.vectorRecord.lemma);


        this.hotWord = new HotWord(hotWordText, hotWordLemma, topSimonymTexts);

        this.startTimestamp = Date.now();
        for (let i = 1; i < 5; i++) {
            this.hotWord.openBottomUnguessedTopSimonym(this.jacoGameUser);
        }
        const {boardText, citationText} = this.getCurrentStateText();
        return new GamestepOutputMessage(this, 0, null, '–ü–æ–≥–Ω–∞–ª–∏!', boardText, citationText, null, '‚è± –ü–µ—Ä–≤—ã–π —Ö–æ–¥!..');
    }
    end() {
        this.isPlaing = false;
        this.isDone = true;
        this.endTimestamp = Date.now();
        this.players.forEach(player => {
            player.gameUser.scoreStat.addFromGame(this, player.gameUser.genericUserUid);
        });
        this.gameMaster.gameUserStorage.save();
        this.gameMaster.removeActiveGame(this);
    }

    referateAction(checkGuessResult, stat, player, fragmentText, proximity, rank) {
        const minUnguessedToWin = Math.max(0, Math.floor((this.hotWord.wordText.length - 2) / 5));
        const proximityPercent = (proximity * 100).toFixed() + '%';
        const isKnownWord = (proximity !== null) && !checkGuessResult.hotWord.isLetter;
        const isBigWord = fragmentText.length > 4;
        const isUncommonWord = rank > uncommonRankThreshold;
        const isTooRareToBeInTop = rank > topSimonymRankThreshold;
        const lowestTopSimonymProximity = this.topSimonyms[this.topSimonyms.length - 1].maxProximity;
        const isHighEnoughToBeInTop = (proximity >= lowestTopSimonymProximity);
        const isHiddenTopSimonymJustGuessed = isTooRareToBeInTop && isHighEnoughToBeInTop && !checkGuessResult.topSimonym.wasGuessed && !checkGuessResult.hotWord.isLetter && !checkGuessResult.hotWord.isEquallyHotLemma && !checkGuessResult.hotWord.isEquallyHotWord;

        const upcasedFragmentText = fragmentText.toUpperCase();
        let phrase;
        if (checkGuessResult.hotWord.isRobustGuess) {
            const justGuessedHotWordLetters = checkGuessResult.hotWord.justGuessedHotWordLetters;
            const justGuessedHotWordUniqueLetters = checkGuessResult.hotWord.justGuessedHotWordUniqueLetters;
            const justGuessedHotWordLettersCount = justGuessedHotWordLetters.length;
            const justGuessedHotWordUniqueLettersCount = justGuessedHotWordUniqueLetters.length;
            if (checkGuessResult.hotWord.isLetter) {
                // CASE: –±—É–∫–≤–∞ —É–≥–∞–¥–∞–Ω–∞
                if (justGuessedHotWordLettersCount === 1) {
                    phrase = `‚ùáÔ∏è –±—É–∫–≤–∞ ¬´<b>${upcasedFragmentText}</b>¬ª –µ—Å—Ç—å!`;
                } else if (justGuessedHotWordLettersCount === 2) {
                    phrase = `‚ùáÔ∏è —Ç–∞–∫–∏—Ö –±—É–∫–≤—ã ¬´<b>${upcasedFragmentText}</b>¬ª –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ —Ü–µ–ª—ã—Ö –¥–≤–µ!!`;
                } else if (justGuessedHotWordLettersCount === 3) {
                    phrase = `‚ùáÔ∏è –¢–†–†–†–ò –±—É–∫–≤—ã ¬´<b>${upcasedFragmentText}</b>¬ª –≤ —Å–ª–æ–≤–µ!!!`;
                } else {
                    phrase = `‚ùáÔ∏è –¥–æ–æ–æ–æ—Ö–µ—Ä–∞ –±—É–∫–≤ ¬´<b>${upcasedFragmentText}</b>¬ª –≤ —Å–ª–æ–≤–µ!!!!!`;
                }
            } else if (checkGuessResult.hotWord.isEquallyHotWord) {
                phrase = `‚ú≥Ô∏è –¢–æ—á–Ω–æ. –ß—ë—Ç–∫–æ. –ë–µ–∑—É–ø—Ä–µ—á–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ ${justGuessedHotWordLettersCount} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤!`;
            } else if (checkGuessResult.hotWord.isEquallyHotLemma) {
                if (stat.hotWord.unguessedLetters.length === 0) {
                    phrase = `üàØÔ∏è+‚ú≥Ô∏è –í—ã –Ω–∞–∑–≤–∞–ª–∏ –ª–µ–º–º—É –∏ –æ—Ç–∫—Ä—ã–ª–∏ –≥–ª–∞–≤–Ω–æ–µ —Å–ª–æ–≤–æ! –ó–≤—É—á–∏—Ç –∫–∞–∫ –æ—à–∏–±–∫–∞, –µ–π-–±–æ–≥—É, –Ω–æ ${justGuessedHotWordLettersCount} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤ –∏ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≥–∞–¥–∞–Ω–æ.`;
                } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
                    phrase = `üàØÔ∏è+‚ú≥Ô∏è –í—ã –Ω–∞–∑–≤–∞–ª–∏ –Ω–µ—Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É, –Ω–æ —ç—Ç–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–±–µ–¥–∞! ${justGuessedHotWordLettersCount} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤.`;
                } else {
                    phrase = `üàØÔ∏è+‚ú≥Ô∏è –û–ß–ï–ù–¨ –ë–õ–ò–ó–ö–û! ${justGuessedHotWordLettersCount} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤.`;
                }
            } else if (checkGuessResult.topSimonym.isRobustGuess) {
                // CASE: —Ç–æ–ø-—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ –∏ –æ–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ
                if (stat.hotWord.unguessedLetters.length === 0) {
                    phrase = `‚ú≥Ô∏è+#Ô∏è‚É£ —ç—Ç–æ –∫–æ–º–±–æ!! –û—Ç–∫—Ä—ã—Ç–æ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} (–µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent} ). –ò –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑–≥–∞–¥–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–ª–æ–≤–æ. ${justGuessedHotWordLettersCount} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤!`;
                } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
                    phrase = `‚ú≥Ô∏è+#Ô∏è‚É£ –∫–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞–±–∞–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} (–µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent} ). –ê –µ—â—ë ${justGuessedHotWordLettersCount} –±—É–∫–≤! ü§©`;
                } else {
                    phrase = `‚ú≥Ô∏è+#Ô∏è‚É£ –ø—Ä–æ—Å—Ç–æ –≤–∞—É!!! –°–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –û—Ç–∫—Ä—ã—Ç–æ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} (–µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent} ). –≠—Ç–æ –≤–æ-–ø–µ—Ä–≤—ã—Ö. –í–æ-–≤—Ç–æ—Ä—ã—Ö, —ç—Ç–æ —Å–ª–æ–≤–æ ‚ú≥Ô∏è ¬´<b>${upcasedFragmentText}</b>¬ª —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–æ–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—Å–µ–≥–æ –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º ${justGuessedHotWordLettersCount} –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ, –∏ —Å–ª–æ–≤–æ ‚Ññ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –∏–∑ —Ç–æ–ø–∞! –ë—Ä–∞–≤–æ!`;
                }
            } else if (isKnownWord) {
                // CASE: —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω
                if (isHiddenTopSimonymJustGuessed) {
                    phrase = `üà≥+‚ú≥Ô∏è –£ –Ω–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ. –°–º–æ—Ç—Ä–∏—Ç–µ! –†–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}. –≠—Ç–æ —Ä–µ–¥–∫–æ–µ (–Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–µ) —Å–ª–æ–≤–æ, –∏ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è: –≤–æ–æ–±—â–µ —Å–ª–æ–≤–æ –ª–∏ —ç—Ç–æ. –¢–∞–∫ —á—Ç–æ —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–æ–ø –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å –∂–∏–∑–Ω—å –∏–≥—Ä–æ–∫–∞–º. –ù–æ –≤—ã –µ–≥–æ –Ω–∞–∑–≤–∞–ª–∏ —Å–∞–º–∏. –ò –æ–Ω–æ "–µ—Å—Ç—å" –≤ —Ç–æ–ø–µ. –≠—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑!`;
                } else if (isBigWord) {
                    // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω
                    if (stat.hotWord.unguessedLetters.length === 0) {
                        phrase = `üà≥/‚ú≥Ô∏è –°–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}.`;
                    } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
                        phrase = `‚ú≥Ô∏è+#Ô∏è‚É£ –∫–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞–±–∞–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} (–µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent} ). –ê –µ—â—ë ${justGuessedHotWordLettersCount} –±—É–∫–≤! ü§©`;
                    } else if (checkGuessResult.topSimonym.wasTopGuess) {
                        // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, –±—ã–ª–æ —Ä–∞–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ —Ç–æ–ø–µ
                        phrase = `‚ú≥Ô∏è –•–∞, —Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ! –≠—Ç–æ —Å–ª–æ–≤–æ, –∫—Å—Ç–∞—Ç–∏ ‚Ññ #Ô∏è‚É£ ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –Ω–æ –º—ã –µ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ —ç—Ç–æ–≥–æ. (–±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}).`;
                    } else if (checkGuessResult.topSimonym.wasGuessed) {
                        // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                        phrase = `‚ú≥Ô∏è –í–æ—Ç —ç—Ç–æ —Å–∏—Ç–∞—Ü–∏—è! –ú—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ —Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –≤—Å–µ–≥–æ-—Ç–æ ${proximityPercent}.`;
                    } else {
                        // CASE: –±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                        phrase = `üà≥/‚ú≥Ô∏è –°–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}.`;
                    }
                } else {
                    // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ
                    if (checkGuessResult.topSimonym.wasTopGuess) {
                        // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, –±—ã–ª —Ä–∞–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–æ–ø–µ
                        phrase = `‚ú≥Ô∏è –•–º–º! ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –≠—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –µ—â—ë –∏ —Å–ª–æ–≤–æ ‚Ññ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –Ω–æ –º—ã –µ–≥–æ —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–Ω–µ–µ. (–±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}).`;
                    } else if (checkGuessResult.topSimonym.wasGuessed) {
                        // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                        phrase = `‚ú≥Ô∏è –•–∞, ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ, –∑–∞–±–∞–≤–Ω–æ. –≠—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –µ—â—ë –∏ —Å–ª–æ–≤–æ, –ø—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É –≤—Å–µ–≥–æ-—Ç–æ ${proximityPercent}.`;
                    } else {
                        // CASE: –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ –∫–∞–∫ –±–ª–∏–∑–∫–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥–∞–Ω–æ, —Å–ª–æ–≤–æ –Ω–µ –∏–∑ —Ç–æ–ø–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                        phrase = `üà≥/‚ú≥Ô∏è –°–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —Ü–µ–ª–∏–∫–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º, ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ü—Ä–∏—á–µ–º, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å ${proximityPercent}.`;
                    }
                }
            } else {
                // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω
                if (justGuessedHotWordUniqueLettersCount > 4) {
                    // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –±–æ–ª—å—à–µ 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤
                    phrase = `‚ú≥Ô∏è –±—É—É—É–º! —Ñ—Ä–∞–≥–º–µ–Ω—Ç ¬´<b>${upcasedFragmentText}</b>¬ª –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, —Å—Ä–∞–∑—É ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –æ—Ç–∫—Ä—ã—Ç–æ!`;
                } else if (justGuessedHotWordUniqueLettersCount > 1) {
                    // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –±–æ–ª—å—à–µ 1 —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –±—É–∫–≤—ã
                    const lettersWithoutLast = justGuessedHotWordUniqueLetters.slice(0, justGuessedHotWordUniqueLetters.length - 1);
                    const lastLetterText = '"' + justGuessedHotWordUniqueLetters[justGuessedHotWordUniqueLetters.length - 1].toUpperCase() + '"';
                    const lettersWithoutLastText = lettersWithoutLast.map(letter => `"${letter.toUpperCase()}"`).join(', ');
                    const lettersText = lettersWithoutLastText + ' –∏ ' + lastLetterText;
                    phrase = `‚ú≥Ô∏è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –§—Ä–∞–≥–º–µ–Ω—Ç ¬´<b>${upcasedFragmentText}</b>¬ª –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—É–∫–≤—ã ‚ùáÔ∏è ${lettersText}. ${justGuessedHotWordLettersCount} –±—É–∫–≤—ã –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç–æ!`;
                } else if (justGuessedHotWordUniqueLettersCount === 1) {
                    // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –±—É–∫–≤–∞
                    const uniqueLetter = justGuessedHotWordUniqueLetters[0];
                    if (justGuessedHotWordLettersCount === 1) {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 –±—É–∫–≤–∞
                        phrase = `‚ú≥Ô∏è/‚ùáÔ∏è –∏–∑ –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ ¬´<b>${upcasedFragmentText}</b>¬ª –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É ‚ùáÔ∏è "${uniqueLetter}". –î–æ–≤–æ–ª—å–Ω–æ —Ä–∏—Å–∫–æ–≤–Ω–∞–Ω–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫.`;
                    } else {
                        // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –æ—Ç–∫—Ä—ã—Ç–∞ 1 —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –±—É–∫–≤–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                        phrase = `‚ú≥Ô∏è/‚ùáÔ∏è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–∑ –≤—Å–µ–≥–æ ¬´<b>${upcasedFragmentText}</b>¬ª –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—É–∫–≤—É ‚ùáÔ∏è ${uniqueLetter}, –Ω–æ –∑–∞—Ç–æ ${justGuessedHotWordLettersCount} —Ä–∞–∑! –õ–æ–≤–∫–æ!`;
                    }
                } else {
                    // CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤ 0
                    throw new Error('CASE: —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —É–≥–∞–¥–∞–Ω, –∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É–∫–≤ 0');
                }
            }
        } else if (checkGuessResult.topSimonym.isRobustGuess) {
            // CASE: —Ç–æ–ø-—Å–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ
            phrase = `#Ô∏è‚É£ –±–ª–∏–∑–∫–æ–µ —Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä ${checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1} —É–≥–∞–¥–∞–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ! –ï–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}.`;
        } else if (isKnownWord) {
            // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            if (checkGuessResult.hotWord.isEquallyHotLemma) {
                if (checkGuessResult.hotWord.wasGuessed) {
                    phrase = `üàØÔ∏è –û–ß–ï–ù–¨ –ë–õ–ò–ó–ö–û! –ê–π-—è–π-—è–π.`;
                } else {
                    phrase = `–í—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ, –Ω—É –∂–µ! –≠—Ç–æ –ø–æ—á—Ç–∏ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –°–æ–≤—Å–µ–º —Ä—è–¥–æ–º!`;
                }
            } else if (isHiddenTopSimonymJustGuessed) {
                if (checkGuessResult.hotWord.wasGuessed) {
                    phrase = `–≠—Ç–æ —Ä–µ–¥–∫–æ–µ "—Å–∫—Ä—ã—Ç–æ–µ" —Ç–æ–ø-—Å–ª–æ–≤–æ –≤—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏: –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}!`;
                } else {
                    phrase = `üà≥ –û–ø–ø–∞! –†–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª. –ù–∞—Å—Ç–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–µ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ —Ç–æ–ø. –ê –≤–µ–¥—å —ç—Ç–æ —Å–ª–æ–≤–æ —Ç–∞–º –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å: –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}! –í—ã –æ—Ç–∫—Ä—ã–ª–∏ "—Å–∫—Ä—ã—Ç–æ–µ" —Å–ª–æ–≤–æ –≤ —Ç–æ–ø–µ, –∑–∞ —ç—Ç–æ –ø–æ–ª–æ–∂–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!`;
                }
            } else if (isBigWord) {
                // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –±–æ–ª—å—à–æ–µ —Å–ª–æ–≤–æ
                if (checkGuessResult.hotWord.wasGuessed) {
                    // CASE: —Ç–∞–∫–æ–µ –±–æ–ª—å—à–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –Ω–æ –µ–≥–æ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `—Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ.`;
                } else {
                    // CASE: —Ç–∞–∫–æ–µ –±–æ–ª—å—à–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `*Ô∏è‚É£ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤—É ¬´<b>${upcasedFragmentText}</b>¬ª: –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ù–∞–¥–µ—é—Å—å —ç—Ç–æ –∫–∞–∫-—Ç–æ –ø–æ–º–æ–∂–µ—Ç.`;
                }
            } else {
                // CASE: (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª–æ–≤–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if (checkGuessResult.hotWord.wasGuessed) {
                    // CASE: —Ç–∞–∫–∞–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –Ω–æ –µ–≥–æ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `—Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É ${proximityPercent}. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å c–ª–µ–¥—É—é—â–∏–π —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–æ.`;
                } else {
                    // CASE: —Ç–∞–∫–∞–µ –Ω–µ–±–æ–ª—å—à–æ–µ (–Ω–µ–ø–æ–ª–µ–∑–Ω–æ–µ) —Å–ª–æ–≤–æ-—Ñ—Ä–∞–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `*Ô∏è‚É£ —Å–ª–æ–≤–æ ¬´<b>${upcasedFragmentText}</b>¬ª –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–ø–µ –±–ª–∏–∑–∫–∏—Ö —Å–ª–æ–≤, –µ–≥–æ –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${proximityPercent}. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.`;
                }
            }

        } else {
            // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–ª–∏ –±—É–∫–≤–∞, –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ
            if (checkGuessResult.hotWord.isLetter) {
                // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞
                if (checkGuessResult.hotWord.wasLetterGoodGuessed) {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, –æ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
                    phrase = `üÜé –Ω–æ –≤–µ–¥—å –±—É–∫–≤–∞ ‚ùáÔ∏è ¬´<b>${upcasedFragmentText}</b>¬ª —É–∂–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞. –ó—Ä—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π —Ö–æ–¥.`;
                } else if (checkGuessResult.hotWord.wasLetterBadGuessed) {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    phrase = `üÜé –±—É–∫–≤—É ¬´<b>${upcasedFragmentText}</b>¬ª —É–∂–µ –Ω–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ. –ë—É–¥—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π.`;
                } else {
                    // CASE: –±—É–∫–≤–∞ –Ω–µ —É–≥–∞–¥–∞–Ω–∞, –µ—â—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–ª–∏
                    let rnd = Math.random();
                    if (rnd > 0.9) {
                        phrase = `üÜé –±—É–∫–≤—ã ¬´<b>${upcasedFragmentText}</b>¬ª –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç`;
                    } else if (rnd > 0.8) {
                        phrase = `üÜé –Ω–µ—Ç —Ç–∞–∫–æ–π –±—É–∫–≤—ã`;
                    } else if (rnd > 0.7) {
                        phrase = `üÜé –∂–∞–ª—å, –Ω–æ –±—É–∫–≤—ã ¬´<b>${upcasedFragmentText}</b>¬ª –Ω–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ`;
                    } else if (rnd > 0.6) {
                        phrase = `üÜé —É–ø—Å, —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç. –í—ã—á–µ—Ä–∫–∏–≤–∞–µ–º ¬´<b>${upcasedFragmentText}</b>¬ª –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–∫–≤`;
                    } else if (rnd > 0.5) {
                        phrase = `üÜé ¬´<b>${upcasedFragmentText}</b>¬ª - —Ö–æ—Ä–æ—à–∞—è –±—É–∫–≤–∞, –Ω–æ –≤ —Å–ª–æ–≤–µ –µ—ë –Ω–µ—Ç. –ñ–∞–ª—å`;
                    } else if (rnd > 0.4) {
                        phrase = `üÜé —Ç–∞–∫–æ–π –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç`;
                    } else if (rnd > 0.3) {
                        phrase = `üÜé –±—É–∫–≤–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç`;
                    } else if (rnd > 0.2) {
                        phrase = `üÜé —Ö–æ—Ç–µ–ª –±—ã —è, —á—Ç–æ–±—ã –≤ –∂–∏–∑–Ω–∏ —É –∫–∞–∂–¥–æ–≥–æ –±—É–∫–≤ ¬´<b>${upcasedFragmentText}</b>¬ª –±—ã–ª–æ –ø–æ–±–æ–ª—å—à–µ, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ–º —Å–ª–æ–≤–µ –µ—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π`;
                    } else if (rnd > 0.1) {
                        phrase = `üÜé –ø–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å: —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç. –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –±—É–∫–≤—É —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ. ¬´<b>${upcasedFragmentText}</b>¬ª –∏—Å–∫–ª—é—á–µ–Ω–∞.`;
                    } else {
                        phrase = `üÜé –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç –±—É–∫–≤—ã ¬´<b>${upcasedFragmentText}</b>¬ª`;
                    }
                }
            } else {
                // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–Ω–µ –±—É–∫–≤–∞), –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ
                if (checkGuessResult.hotWord.wasGoodGuessedSuperstring) {
                    // CASE: –Ω–µ—Å–ª–æ–≤–∞—Ä–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (–Ω–µ –±—É–∫–≤–∞), –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ, —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ —Ä–∞–Ω—å—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —ç—Ç–æ—Ç –µ—Å—Ç—å —Ü–µ–ª–∏–∫–æ–º
                    phrase = `‚ú¥Ô∏è –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤—ã—Ö –±—É–∫–≤ –Ω–µ —É–≥–∞–¥–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ ‚ú≥Ô∏è ¬´<b>${upcasedFragmentText}</b>¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ "${checkGuessResult.hotWord.wasGoodGuessedSuperstring.toUpperCase()}", –∞ —ç—Ç–æ —Ä–∞–Ω–µ–µ —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏.`;
                } else {
                    phrase = `‚ú¥Ô∏è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ ‚Äî ¬´<b>${upcasedFragmentText}</b>¬ª, –Ω–æ —Ç–∞–∫–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–µ –Ω–µ—Ç.`;
                }
            }
        }
        let postPhrase = '';
        if (stat.hotWord.unguessedLetters.length === 0) {
            postPhrase = `\n‚úÖ –í–´ –ü–û–õ–ù–û–°–¢–¨–Æ –£–ì–ê–î–ê–õ–ò –°–õ–û–í–û! ¬´<b>${this.hotWord.wordText.toUpperCase()}</b>¬ª, –£–†–ê!`;
        } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
            postPhrase = `\n‚úÖ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ ${stat.hotWord.unguessedLetters.length} –±—É–∫–≤, –∞ –∑–Ω–∞—á–∏—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–ª–æ–≤–æ ¬´<b>${this.hotWord.wordText.toUpperCase()}</b>¬ª —Ä–∞—Å–∫—Ä—ã—Ç–æ! –≠—Ç–æ –ø–æ–±–µ–¥–∞!`;
        }
        const phrases = [phrase, postPhrase];
        return phrases;
    }
    referateScoreGain(checkGuessResult, stat, player, fragmentText, proximity, rank) {
        const minUnguessedToWin = Math.max(0, Math.floor((this.hotWord.wordText.length - 2) / 5));
        const isKnownWord = (proximity !== null) && !checkGuessResult.hotWord.isLetter;
        const isBigWord = fragmentText.length > 4;
        const isUncommonWord = rank > uncommonRankThreshold;
        const isTooRareToBeInTop = rank > topSimonymRankThreshold;
        const lowestTopSimonymProximity = this.topSimonyms[this.topSimonyms.length - 1].maxProximity;
        const isHighEnoughToBeInTop = (proximity >= lowestTopSimonymProximity);
        const isHiddenTopSimonymJustGuessed = isTooRareToBeInTop && isHighEnoughToBeInTop && !checkGuessResult.topSimonym.wasGuessed && !checkGuessResult.hotWord.isLetter && !checkGuessResult.hotWord.isEquallyHotLemma && !checkGuessResult.hotWord.isEquallyHotWord;

        let scoreGains = [];
        if (checkGuessResult.topSimonym.isRobustGuess) {
            if (isUncommonWord) {
                const scoreGainValue = 750 + Math.round(750 / (checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1));
                const subject = '–Ω–µ—á–∞—Å—Ç–æ–µ –±–ª–∏–∑–∫–æ–µ —Ç–æ–ø-—Å–ª–æ–≤–æ';
                const value = scoreGainValue;
                const congratz = 1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            } else {
                const scoreGainValue = 250 + Math.round(750 / (checkGuessResult.topSimonym.justTopGuessedSimonymIdx + 1));
                const subject = '–±–ª–∏–∑–∫–æ–µ —Ç–æ–ø-—Å–ª–æ–≤–æ';
                const value = scoreGainValue;
                const congratz = 1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            }
        }
        if (isHiddenTopSimonymJustGuessed) {
            if (checkGuessResult.hotWord.isRobustGuess) {
                const scoreGainValue = 5000;
                const subject = '—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Ç–æ–ø-—Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞';
                const value = scoreGainValue;
                const congratz = 1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            } else {
                const scoreGainValue = 1000;
                const subject = '—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Ç–æ–ø-—Å–ª–æ–≤–æ';
                const value = scoreGainValue;
                const congratz = 1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            }
        }
        if (checkGuessResult.hotWord.isRobustGuess) {

            if (checkGuessResult.hotWord.isLetter) {
                if (fragmentText === '—ä') {
                    const scoreGainValue = 666 * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                    const subject = '—ç—Ç–æ –∑–Ω–∞–∫! (—Ç–≤–µ—Ä–¥—ã–π)';
                    const value = scoreGainValue;
                    const congratz = Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3);
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                } else if (fragmentText === '—å') {
                    const scoreGainValue = 66 * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                    const subject = '—ç—Ç–æ –∑–Ω–∞–∫! (–º—è–≥–∫–∏–π)';
                    const value = scoreGainValue;
                    const congratz = Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3);
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                } else if (fragmentText === '—è') {
                    const scoreGainValue = 99 * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                    const subject = '–ª—é–±–∏–º–∞—è –±—É–∫–≤–∞';
                    const value = scoreGainValue;
                    const congratz = Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3);
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                } else {
                    const scoreGainValue = 50 * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                    const subject = '–±—É–∫–≤–∞';
                    const value = scoreGainValue;
                    const congratz = Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3);
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                }

            } else {
                if (!checkGuessResult.hotWord.isEquallyHotWord && checkGuessResult.hotWord.isEquallyHotLemma) {
                    const scoreGainValue = 10000;
                    const subject = '–ª–µ–º–º–∞ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞';
                    const value = scoreGainValue;
                    const congratz = 6;
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                } else {
                    const scoreGainValue = 50 * checkGuessResult.hotWord.justGuessedHotWordLetters.length * checkGuessResult.hotWord.justGuessedHotWordLetters.length;
                    const subject = '—Ñ—Ä–∞–≥–º–µ–Ω—Ç';
                    const value = scoreGainValue;
                    const congratz = Math.min(Math.floor(checkGuessResult.hotWord.justGuessedHotWordLetters.length / 2 + 1), 3);
                    const isFinal = false;
                    const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                    scoreGains.push(scoreGain);
                }
            }
        } else if (!checkGuessResult.hotWord.isEquallyHotWord && checkGuessResult.hotWord.isEquallyHotLemma  && !checkGuessResult.hotWord.wasGuessed) {
            const scoreGainValue = 500;
            const subject = '–ª–µ–º–º–∞';
            const value = scoreGainValue;
            const congratz = 2;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        }

        if (!checkGuessResult.topSimonym.isRobustGuess && !checkGuessResult.hotWord.isRobustGuess) {
            if (checkGuessResult.hotWord.wasGuessed) {
                const scoreGainValue = -50;
                const subject = '–Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
                const value = scoreGainValue;
                const congratz = -1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            } else if (isKnownWord && !checkGuessResult.topSimonym.wasGuessed) {
                const scoreGainValue = -10;
                const subject = '—Ü–µ–Ω–∞ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞';
                const value = scoreGainValue;
                const congratz = 0;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            } else {
                const scoreGainValue = -25;
                const subject = '–Ω–µ—É–¥–∞—á–∞';
                const value = scoreGainValue;
                const congratz = -1;
                const isFinal = false;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
                scoreGains.push(scoreGain);
            }
        }

        if (checkGuessResult.hotWord.isRobustGuess) {
            if (checkGuessResult.hotWord.isEquallyHotWord) {
                const scoreGainValue = 2000;
                const subject = '—Å–ª–æ–≤–æ –Ω–∞–∑–≤–∞–Ω–æ —Ç–æ—á–Ω–æ';
                const value = scoreGainValue;
                const congratz = 5;
                const isFinal = true;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);

                scoreGains.push(scoreGain);
            } else if (stat.hotWord.unguessedLetters.length === 0) {
                const scoreGainValue = 1000;
                const subject = '—Å–ª–æ–≤–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é';
                const value = scoreGainValue;
                const congratz = 5;
                const isFinal = true;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);

                scoreGains.push(scoreGain);
            } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
                const scoreGainValue = 500;
                const subject = '—Å–ª–æ–≤–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é';
                const value = scoreGainValue;
                const congratz = 4;
                const isFinal = true;
                const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);

                scoreGains.push(scoreGain);
            }
        } else if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin) {
            const scoreGainValue = 1;
            const subject = '—Å–ª–æ–≤–æ –º—É—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø—ã—Ç–∞–Ω–æ';
            const value = scoreGainValue;
            const congratz = 0;
            const isFinal = true;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        }

        if (stat.hotWord.unguessedLetters.length <= minUnguessedToWin && this.stepNum < 10) {
            const scoreGainValue = Math.round(3000 / (this.stepNum + 1));
            const subject = '–±—ã—Å—Ç—Ä–∞—è –ø–æ–±–µ–¥–∞';
            const value = scoreGainValue;
            const congratz = 6;
            const isFinal = true;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        }

        const nextSteakSign = Math.sign(scoreGains.reduce((sum, scoreGain) => { return sum + scoreGain.value; }, 0));

        if (nextSteakSign > 0 && player.score.streak > 50) {
            const scoreGainValue = -10000;
            const subject = '—à—Ç—Ä–∞—Ñ –∑–∞ —á–∏—Ç–µ—Ä—Å—Ç–≤–æ';
            const value = scoreGainValue;
            const congratz = -1;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        } else if (nextSteakSign > 0 && player.score.streak === 5) {
            const scoreGainValue = -100;
            const subject = '—à—Ç—Ä–∞—Ñ –∑–∞ –∂–∞–¥–Ω–æ—Å—Ç—å';
            const value = scoreGainValue;
            const congratz = -1;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        } else if (nextSteakSign > 0 && player.score.streak > 2) {
            const scoreGainValue = 100 * Math.min(player.score.streak + 1, 5);
            const subject = '—á—É–¥–µ—Å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥';
            const value = scoreGainValue;
            const congratz = 4;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        } else if (nextSteakSign > 0 && player.score.streak > 0) {
            const scoreGainValue = 100 * Math.min(player.score.streak + 1, 5);
            const subject = '—Å–µ—Ä–∏—è –ø–æ–±–µ–¥';
            const value = scoreGainValue;
            const congratz = 4;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        } else if (nextSteakSign < 0 && player.score.streak === -3) {
            const scoreGainValue = +3;
            const subject = '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –Ω–µ–≤–µ–∑–µ–Ω–∏–µ';
            const value = scoreGainValue;
            const congratz = 0;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        } else if (nextSteakSign < 0 && player.score.streak === -5) {
            const scoreGainValue = +1;
            const subject = '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ñ–∞—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–≤–µ–∑–µ–Ω–∏–µ';
            const value = scoreGainValue;
            const congratz = 0;
            const isFinal = false;
            const scoreGain = new ScoreGain(subject, value, this.stepNum, fragmentText, congratz, isFinal);
            scoreGains.push(scoreGain);
        }
        const initialReferateResult = {scoreGainTextLines: [], scoreGainSum: 0, congratzMax: -Infinity, isFinal: false};
        if (scoreGains.length > 0) {
            const referateResult = scoreGains.reduce((referateResult, scoreGain) => {
                const scoreGainSignedText = ((scoreGain.value >= 0) ? '+' : '‚àí') + Math.abs(scoreGain.value);
                const sumBefore = player.score.sum + referateResult.scoreGainSum;
                const sumAfter = sumBefore + scoreGain.value;
                const scoreGainSumAfterSignedText = ((sumAfter >= 0) ? '+' : '‚àí') + Math.abs(sumAfter);
                const scoreGainSumBeforeSignedText = ((sumBefore >= 0) ? '+' : '‚àí') + Math.abs(sumBefore);
                // üí∞üîπ
                const scoreGainTextLine = `üí≥ ${scoreGainSumBeforeSignedText} <b>[ ${scoreGainSignedText}üí∞ ]</b> = ${scoreGainSumAfterSignedText} / ${scoreGain.subject} /`;
                referateResult.scoreGainTextLines.push(scoreGainTextLine);
                referateResult.scoreGainSum += scoreGain.value;
                referateResult.congratzMax = Math.max(scoreGain.congratz, referateResult.congratzMax);
                referateResult.isFinal = !!(scoreGain.isFinal || referateResult.isFinal);
                return referateResult;
            }, initialReferateResult);
            referateResult.scoreGains = scoreGains;
            return referateResult;
        } else {
            const referateResult =  Object.assign({}, initialReferateResult, {congratzMax: 0});
            referateResult.scoreGains = [];
            return referateResult;
        }
    }
    getGuessedBadLettersText() {
        const badLettersText = Object.keys(this.hotWord.guessHistory.fragment.letter.bad).reverse().join('');
        return badLettersText;
    }
    getRandomCitationInfoText() {
        const positionRatio = this.randomCitation.positionRatio;
        let positionText;
        if (positionRatio >= 0 && positionRatio < 0.05) {
            positionText = '–≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.05 && positionRatio < 0.15) {
            positionText = '–≤ –Ω–∞—á–∞–ª–µ –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.15 && positionRatio < 0.35) {
            positionText = '–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.35 && positionRatio < 0.48) {
            positionText = '–±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.48 && positionRatio < 0.52) {
            positionText = '–Ω–∞ —ç–∫–≤–∞—Ç–æ—Ä–µ –∫–Ω–∏–≥–∏';
        }else if (positionRatio >= 0.52 && positionRatio < 0.65) {
            positionText = '–≤ –Ω–∞—á–∞–ª–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.65 && positionRatio < 0.85) {
            positionText = '–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.85 && positionRatio <= 0.95) {
            positionText = '–∫ –∫–æ–Ω—Ü—É –∫–Ω–∏–≥–∏';
        } else if (positionRatio >= 0.95 && positionRatio <= 1) {
            positionText = '–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥–∏';
        } else {
            throw new Error('Wrong ratio');
        }
        const citationInfoText = `üìñ ¬´${this.randomCitation.bookInfo.name}¬ª ${this.randomCitation.bookInfo.author}, ${this.randomCitation.bookInfo.year} / ${positionText} /`;
        return citationInfoText;
    }
    getTopSimonymText() {
        const stat = this.hotWord.getStat();
        const lines = [];
        this.topSimonyms.forEach((topSimonym, idx) => {
            const isOpened = this.isDone || stat.topSimonym.guessedSimonyms.includes(topSimonym.vectorRecord.lemma);
            let lemma;
            if (isOpened) {
                lemma = topSimonym.vectorRecord.lemma;
            } else {
                lemma = '?'.repeat(topSimonym.vectorRecord.lemma.length);
            }
            const tag = topSimonym.vectorRecord.tag;
            const proximityPercent = (topSimonym.maxProximity * 100).toFixed()+'%';
            const rank = topSimonym.vectorRecord.vocabularyIdx;
            const rankCategory = (rank > uncommonRankThreshold) ? '–Ω–µ—á–∞—Å—Ç.' : '';
            //const line = `#${idx + 1}: ${lemma} ${tag} ${proximityPercent} R${rankCategory}`;
            const line = `#${idx + 1}: ${lemma} ${proximityPercent} ${rankCategory}`;

            if (isOpened) { // TEMPORARY TODO: configurable
                lines.push(line);
            }
        });
        return lines.join('\n');
    }
    getCurrentStateText() {
        const maskedWord = this.isDone ? this.hotWord.wordText.toUpperCase() : this.hotWord.getMasked();

        let citationText = '';
        let shortCitationText = '';

        if (this.randomCitation) {
            const randomCitationInfoText = this.getRandomCitationInfoText();
            const [hotChunkWordPrefix, hotChunkWordPostfix] = this.randomCitation.hotChunk.chunk.text.split(this.randomCitation.hotChunk.chunk.word);
            citationText += randomCitationInfoText;
            citationText += `\n`;
            //citationText += `‚Äî`;
            //citationText += `\n`;
            citationText += `\n`;
            citationText += `üí¨ <i>¬´...${this.randomCitation.prefixText}${hotChunkWordPrefix}</i><b>${maskedWord}</b><i>${hotChunkWordPostfix}${this.randomCitation.postfixText}...¬ª</i>`;
            citationText += `\n`;

            shortCitationText += `üí¨ <i>¬´...${this.randomCitation.shortPrefixText}${hotChunkWordPrefix}</i><b>${maskedWord}</b><i>${hotChunkWordPostfix}${this.randomCitation.shortPostfixText}...¬ª</i>`;
        }

        let boardText = '';

        const wordLength = this.hotWord.wordText.length;
        const unguessedLettersCount = this.hotWord.getStat().hotWord.unguessedLetters.length;

        boardText += `‚ú≥Ô∏è `;
        boardText += `[ <b>${maskedWord}</b> ] ${unguessedLettersCount} / ${wordLength}`;
        boardText += `\n`;
        //boardText += `‚Äî`;
        //boardText += `\n`;
        boardText += `\n`;

        const badLettersRawText = this.getGuessedBadLettersText();
        if (badLettersRawText) {
            const badLettersText = `<s>${badLettersRawText.toUpperCase()}</s>`;
            boardText += `üÜé `;
            boardText += `${badLettersText}`;
            boardText += `\n`;
            //boardText += `‚Äî`;
            //boardText += `\n`;
            boardText += `\n`;
        }

        boardText += `#Ô∏è‚É£ `;
        boardText += this.getTopSimonymText();
        boardText += `\n`;
        boardText += `\n`;

        if (this.isDone) {
            const secDiff = Math.floor((this.endTimestamp - this.startTimestamp) / 1000);
            boardText += `–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω –∑–∞ ‚è± ${secDiff} —Å–µ–∫—É–Ω–¥. `;
            boardText += `–∏ üîÑ ${this.stepNum + 1} —Ö–æ–¥–æ–≤. `;
        }
        return {boardText, citationText, shortCitationText};
    }
    getGameScoreDetailsText(sortedPlayers) {
        const detailsTextsPerPlayer = sortedPlayers.map((player, currentGameRank) => {
            let userRankEmoji;
            if (currentGameRank === 0) {
                userRankEmoji = 'ü•á';
            } else if (currentGameRank === 1) {
                userRankEmoji = 'ü•à';
            } else {
                userRankEmoji = 'ü•â';
            }
            let playerDetailsHeaderText = '';
            playerDetailsHeaderText += `üë®‚Äçüéì ${player.gameUser.name} ${userRankEmoji}`;
            playerDetailsHeaderText += '\n';
            playerDetailsHeaderText += '-----------------------------';
            playerDetailsHeaderText += '\n';

            const playerDetailsText = this.getGameScoreDetailsTextForPlayer(player);

            return playerDetailsHeaderText + playerDetailsText;
        });
        return detailsTextsPerPlayer;
    }
    getGameScoreDetailsTextForPlayer(player) {

        const gainsPerSubject = player.score.gains.reduce((gainsPerSubject, scoreGain) => {
            let bin = gainsPerSubject[scoreGain.subject];
            if (!bin) {
                bin = []
                gainsPerSubject[scoreGain.subject] = bin;
            }
            bin.push(scoreGain);
            return gainsPerSubject;
        }, {});

        const lines = Object.entries(gainsPerSubject).map(([subject, bin]) => {
            const initialScoreGainsInfo = {lines: [], sum: 0, count: 0};
            const similarGainsInfo = bin.reduce((similarGainsInfo, scoreGain) => {
                const scoreGainSignedText = ((scoreGain.value >= 0) ? '+' : '‚àí') + Math.abs(scoreGain.value);
                const scoreGainTextLine = `${scoreGainSignedText}`;
                similarGainsInfo.lines.push(scoreGainTextLine);
                similarGainsInfo.sum += scoreGain.value;
                similarGainsInfo.count++;
                return similarGainsInfo;
            }, initialScoreGainsInfo);



            let xFactorText = '';
            if (similarGainsInfo.count > 1) {
                xFactorText = ' x' + similarGainsInfo.count;
            }
            const scoreGainSignedText = ((similarGainsInfo.sum >= 0) ? '+' : '‚àí') + Math.abs(similarGainsInfo.sum);
            const subsumText = `${scoreGainSignedText}`;
            const similarGainsLine = (similarGainsInfo.lines.length > 1) ? similarGainsInfo.lines.join(' ') + ' = ' : '';

            let badge = 'üèÖ ';
            const groupStat = player.gameUser.scoreStat.groupStats[this.gameUserGroup.genericUserGroupUid];
            if (groupStat) {
                const coreGainsGroupSummary = groupStat.getScoreGainsGroupSummary();
                const maxGainsSumForSubject = coreGainsGroupSummary.maxScoreGainsSumsBySubjet[subject];
                if (maxGainsSumForSubject === undefined) {
                    badge = 'üéñ NEW! ';
                } else if (similarGainsInfo.sum > maxGainsSumForSubject) {
                    badge = 'üèÜ BEST! ';
                }
            }
            // üèÖüö©üÜïüéñ
            const scoreGainTextLine = `${badge}<b>${subject.toUpperCase()}</b>${xFactorText}\n${similarGainsLine}${subsumText}üí∞`;
            return scoreGainTextLine;
        });
        let detailsText = '';
        detailsText += lines.join('\n');
        detailsText += '\n';
        detailsText += '-----------------------------';
        detailsText += '\n';
        detailsText += `üí≥ –í–°–ï–ì–û –ó–ê –ò–ì–†–£: <b>${player.score.sum}</b>üí∞`;
        return detailsText;
    }
    getGameScoreSummaryText(sortedPlayers) {
        const summaryTextsPerPlayer = sortedPlayers.map((player) => {
            return this.getGameScoreSummaryTextForPlayer(player);
        });
        return summaryTextsPerPlayer;
    }
    getGameScoreSummaryTextForPlayer(player) {

        let summaryText = '';

        const groupStat = player.gameUser.scoreStat.groupStats[this.gameUserGroup.genericUserGroupUid];

        if (groupStat && groupStat.gameStats.length > 0) {
            const gameStats = groupStat.gameStats;
            const initialMmm = {count: 0, step: {min: Infinity, max: -Infinity, sum: 0}, score: {min: Infinity, max: -Infinity, sum: 0, all: []}};
            const mmm = gameStats.reduce((mmm, gameStat) => {
                mmm.step.min = Math.min(mmm.step.min, gameStat.stepsCount);
                mmm.step.max = Math.max(mmm.step.max, gameStat.stepsCount);
                mmm.step.sum += gameStat.stepsCount;
                const score = gameStat.scoreGains.reduce((score, scoreGain) => {return score + scoreGain.value}, 0);
                mmm.score.min = Math.min(mmm.score.min, score);
                mmm.score.max = Math.max(mmm.score.max, score);
                mmm.score.sum += score;
                mmm.score.all.push(score);
                mmm.count++;
                return mmm;
            }, initialMmm);
            mmm.step.mean = mmm.step.sum / mmm.count;
            mmm.score.mean = mmm.score.sum / mmm.count;
            const stepSortedStepsCount = gameStats.map(gameStat => gameStat.stepsCount).sort();
            const sortedGameScores = mmm.score.all.sort();
            mmm.step.median = stepSortedStepsCount[Math.floor(stepSortedStepsCount.length / 2)];
            mmm.score.median = sortedGameScores[Math.floor(sortedGameScores.length / 2)];

            summaryText += '\n';
            summaryText += '-----------------------------';
            summaryText += '\n';
            summaryText += `üìä –í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ —Å—ã–≥—Ä–∞–Ω–æ ${mmm.count} –∏–≥—Ä. ‚è± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: <b>–º–µ–¥. ${mmm.step.median.toFixed(0)}</b>, —Å—Ä–µ–¥. ${mmm.step.mean.toFixed(0)}, –º–∞–∫—Å. ${mmm.step.max.toFixed(0)}, –º–∏–Ω. ${mmm.step.min.toFixed(0)}. üí≥ –û—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É: <b>–º–µ–¥. ${mmm.score.median.toFixed(0)}</b>, —Å—Ä–µ–¥. ${mmm.score.mean.toFixed(0)}, –º–∞–∫—Å. ${mmm.score.max.toFixed(0)}, –º–∏–Ω. ${mmm.score.min.toFixed(0)}.`;
            summaryText += '\n';
        }


        return summaryText;
    }
}
module.exports = Game;
